# 수능 수학 확통에서 점에서 점까지 가는 경로의 개수 찾는데 장애물이 있는 문제 풀이법 참고했음
# 사실 처음 봤을 때 저 방법 떠올리고 엥? 해서 다른 사람들 어떻게 접근했지 검색해봤는데 다 똑같았음. 동적 계획법 어쩌구 하던데 전 용어는 몰랐음.

# 1 1 1 1
# 1 X 1 2
# 1 1 2 4 << 4가 3*4 행렬에 [2, 2]에 웅덩이가 있는 경우의 답

def solution(m, n, puddles):
    puddles = [[q,p] for [p,q] in puddles]      # 미리 puddles 좌표 거꾸로 // 왜냐면 이 문제가 행렬 좌표가 뒤집혀있었음. 이유 모름. 문제가 그럼.
    dp = [[0] * (m + 1) for i in range(n + 1)]  # dp 초기화 (dp는 경로의 갯수를 더하기 위해서 쓰는 2차원 배열.)
    dp[1][1] = 1           # 집의 위치(시작위치) (이런 식으로 좌표 찍고 경로의 수 넣어서 계산함.)

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if i == 1 and j == 1: continue 
            if [i, j] in puddles:    # 웅덩이 위치의 경우 값을 0으로
                dp[i][j] = 0
            else:                    # 현재 칸은 왼쪽 칸, 위 칸의 합산!
                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % 1000000007
    return dp[n][m]
