def nine_divide_quanquer(x, y, N):
    global matrix, number     
    check = True                   
    firstcolor = matrix[x][y]     
                                     

    for i in range(x, x+N):           
        if check == False:             
            break                      

        for j in range(y, y+N):     
            if firstcolor != matrix[i][j]:
                check = False      
                n = N//3
                nine_divide_quanquer(x, y, n) #7
                nine_divide_quanquer(x + n, y, n) #8
                nine_divide_quanquer(x + (2*n), y, n) #9
                nine_divide_quanquer(x, y + n, n) #4
                nine_divide_quanquer(x + n, y + n, n) #5
                nine_divide_quanquer(x + (2*n), y + n, n) #6
                nine_divide_quanquer(x, y + (2*n), n) #1
                nine_divide_quanquer(x + n, y + (2*n), n) #2
                nine_divide_quanquer(x + (2*n), y + (2*n), n) #3
                break
    if check:               
        if firstcolor == 1:
            number[2] += 1
            return
        elif firstcolor == 0:
            number[1] += 1
            return
        elif firstcolor == -1:
            number[0] += 1
matrix = []
number = [0, 0, 0]

N = int(input())
for i in range(N):
    matrix.append(list(map(int, input().split()))) 

nine_divide_quanquer(0, 0, N)
for i in number:
    print(i)
